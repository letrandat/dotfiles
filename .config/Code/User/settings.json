{
  // workbench
  // https://code.visualstudio.com/api/extension-capabilities/extending-workbench
  // I don't need activity bar
  "workbench.activityBar.location": "hidden",
  "workbench.colorTheme": "GitHub Light Default",
  "workbench.iconTheme": "material-icon-theme",
  // Try either of the following themes for dark mode
  // "workbench.preferredDarkColorTheme": "Dracula Theme",
  "workbench.preferredDarkColorTheme": "GitHub Dark Dimmed",
  "workbench.preferredLightColorTheme": "GitHub Light Default",

  // Accessibility Configuration
  // Disable auto-send messages in voice chat
  "accessibility.voice.speechTimeout": 0,

  // Window Configuration
  "window.openFoldersInNewWindow": "off",
  "window.autoDetectColorScheme": true,

  // Editor Configuration
  "editor.fontSize": 12,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": false,
  "editor.lineNumbers": "relative",
  "workbench.editor.showTabs": "none",
  "editor.rulers": [100],
  // Enable bracket pair colorization for better readability
  "editor.bracketPairColorization.enabled": true,
  // Show vertical lines for bracket pairs
  "editor.guides.bracketPairs": true,
  "editor.minimap.enabled": false,
  // Enable inlay hints padding for all languages to make them more readable
  "editor.inlayHints.padding": true,
  // hold ctrl+opt to show inlay hints
  "editor.inlayHints.enabled": "offUnlessPressed",
  // Enable font Ligatures
  "editor.fontLigatures": true,
  "editor.fontFamily": "JetBrainsMono Nerd Font",

  // Search Configuration
  "search.searchEditor.focusResultsOnSearch": true,
  "search.searchEditor.reusePriorSearchConfiguration": true,
  // files Configuration
  "files.trimTrailingWhitespace": true,
  "files.autoSave": "afterDelay",

  // Zen Mode Configuration
  "zenMode.hideLineNumbers": false,
  "zenMode.showTabs": "none",

  // Terminal Configuration
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.suggest.enabled": true,
  // Use either the following font for vscode terminal
  // "terminal.integrated.fontFamily": "FiraCode Nerd Font Mono",
  // terminal profiles
  "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
  "terminal.integrated.profiles.osx": {
    "vscode-tmux": {
      "path": "zsh",
      "args": ["-c", "~/.config/Code/User/bin/vscode-tmux.sh"],
      "icon": "terminal-tmux"
    }
  },
  "terminal.integrated.defaultProfile.osx": "zsh",
  "workbench.panel.opensMaximized": "always",

  // Programming Languages Configuration
  // Go language Configuration
  "[go]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "golang.go"
  },
  "gopls": {
    "ui.semanticTokens": true
  },
  // Enable all inlay hints for Go just for testing
  // I will disable some of them later if they are not useful
  "go.inlayHints.compositeLiteralFields": true,
  "go.inlayHints.constantValues": true,
  "go.inlayHints.rangeVariableTypes": true,
  "go.inlayHints.assignVariableTypes": true,
  "go.inlayHints.compositeLiteralTypes": true,
  "go.inlayHints.functionTypeParameters": true,
  "go.inlayHints.parameterNames": true,

  // Lua Configuration
  "[lua]": {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "yinfei.luahelper"
  },

  "[jsonc]": {
    "editor.formatOnSave": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },

  // Java language settings
  "[java]": {
    "editor.formatOnSave": false,
    "editor.defaultFormatter": "redhat.java"
  },
  "java.format.settings.url": "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml",
  "java.format.settings.profile": "GoogleStyle",

  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonnet]": {
    "editor.defaultFormatter": "Grafana.vscode-jsonnet"
  },
  "jsonnet.languageServer.formatting": {
    "StringStyle": "double"
  },
  // plugins

  // Sonarlint Configuration
  "sonarlint.pathToNodeExecutable": "/Users/dat/.nvm/versions/node/v22.13.1/bin/node",

  // Git Configuration
  "git.openRepositoryInParentFolders": "always",
  "git.autofetch": true,
  "git.verboseCommit": true,
  "git.enableSmartCommit": true,

  // MultiCommand Configuration
  "multiCommand.commands": [
    {
      "command": "extension.multiCommand.maximizeAndFocusActiveEditorGroup",
      "sequence": [
        "workbench.action.focusActiveEditorGroup",
        "workbench.action.maximizeEditorHideSidebar",
        "workbench.action.closePanel",
        "workbench.action.joinAllGroups"
      ]
    },
    {
      "command": "extension.multiCommand.maximizeAndFocusPanel",
      "sequence": [
        "workbench.action.maximizeEditorHideSidebar", // use this to maximize the editor to actually hide all other panels
        "workbench.action.toggleMaximizedPanel"
      ]
    }
  ],

  // vscode-neovim Configuration
  "vscode-neovim.NVIM_APPNAME": "nvim-kickstart",

  // Vim Configuration
  // vim.core
  "vim.useSystemClipboard": true,
  "vim.leader": "<space>",
  // Enable and configure yank highlighting
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.duration": 200,
  // allowing more breathing room when using vim keybindings
  "vim.timeout": 3000,
  // vim.easymotion
  "vim.easymotion": true,
  "vim.easymotionKeys": "hklyuiopnm,qwertzxcvbasdgjf",
  "vim.insertModeKeyBindings": [],
  "vim.visualModeKeyBindingsNonRecursive": [
    // START: Core settings
    // prevent copying the selected text after pasting
    {
      "before": ["p"],
      // p: Paste the text.
      // gv: Reselect the text that was just pasted.
      // y: Yank the reselected text back
      "after": ["p", "g", "v", "y"]
    },
    {
      "before": ["K"],
      "commands": ["editor.action.moveLinesUpAction"]
    },
    {
      "before": ["J"],
      "commands": ["editor.action.moveLinesDownAction"]
    },
    // END: Core settings
    // START: easymotion
    {
      "before": ["s"], // read: use s to jump to anywhere with easymotion
      "after": ["<leader>", "<leader>", "2", "s"]
    },
    // END: easymotion
    // START: code format
    {
      "before": ["<leader>", "c", "f"],
      "commands": ["editor.action.formatSelection"]
    },
    // END: code format
    // START: LSP support
    // rename symbol (code, rename)
    {
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"]
    },
    // "<leader>ca" equivalent to refactor
    {
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.refactor"]
    },
    // "<leader>cA" equivalent to refactor at source level
    {
      "before": ["<leader>", "c", "A"],
      "commands": ["editor.action.sourceAction"]
    },
    // END: LSP support
    // START: git
    // [g]it [r]evert (cmd+g r)
    {
      "before": ["<leader>", "g", "r"],
      "commands": ["git.revertSelectedRanges"]
    },
    // [g]it [s]tage (cmd+g s)
    {
      "before": ["<leader>", "g", "s"],
      "commands": ["git.stageSelectedRanges"]
    },
    // [g]it [u]nstage (cmd+g u)
    {
      "before": ["<leader>", "g", "u"],
      "commands": ["git.unstageSelectedRanges"]
    }
    // END: Git keybindings
    // END: git
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // START: Core settings
    // use vscode undo/redo
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<C-r>"],
      "commands": ["redo"]
    },
    {
      "before": ["Y"], // usage: Y to yank from start to end
      "after": ["y", "$"]
    },
    {
      "before": ["<C-c>"],
      "after": ["c", "i", "w"]
    },
    //
    // Editor Groups aka VIM SPLIT Movement Configuration
    //
    // note: always use arrow keys to interact with editor groups
    {
      "before": ["Up"],
      "after": ["<C-w>", "k"]
    },
    {
      "before": ["Down"],
      "after": ["<C-w>", "j"]
    },
    {
      "before": ["Left"],
      "after": ["<C-w>", "h"]
    },
    {
      "before": ["Right"],
      "after": ["<C-w>", "l"]
    },
    {
      "before": ["C-w", "Left"],
      "commands": ["workbench.action.moveActiveEditorGroupLeft"]
    },
    {
      "before": ["C-w", "Right"],
      "commands": ["workbench.action.moveActiveEditorGroupRight"]
    },
    // Move around editors with buffer prev and next
    {
      "before": ["H"],
      "commands": [":bp"]
    },
    {
      "before": ["L"],
      "commands": [":bn"]
    },
    // Vim UI Configuration
    // [u]i toggle [w]rap
    {
      "before": ["<leader>", "u", "w"],
      "commands": ["editor.action.toggleWordWrap"]
    },
    // [u]i toggle [z]en mode
    {
      "before": ["<leader>", "u", "z"],
      "commands": ["workbench.action.toggleZenMode"]
    },
    // [u]i [v]iew markdown preview to the side
    {
      "before": ["<leader>", "u", "v"],
      "commands": ["markdown.showPreviewToSide"],
      "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    // [u]i [V]iew (BIGGER) markdown preview
    {
      "before": ["<leader>", "u", "V"],
      "commands": ["markdown.showPreview"],
      "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    // search keybindings
    {
      "before": ["<leader>", "s", "k"],
      "commands": ["workbench.action.openGlobalKeybindings"]
    },
    // open vim command line with :
    {
      "before": [":"],
      "commands": ["vim.showQuickpickCmdLine"]
    },
    // END: Core settings
    // START: easymotion
    {
      "before": ["s"], // read: use s to jump to anywhere with easymotion
      "after": ["<leader>", "<leader>", "2", "s"]
    },
    // END: easymotion
    // START: code format
    // rename symbol (code, rename)
    {
      "before": ["<leader>", "c", "r"],
      "commands": ["editor.action.rename"]
    },
    // format the changes only
    {
      "before": ["<leader>", "c", "f"],
      "commands": ["editor.action.formatChanges"]
    },
    // [f]ormat but BIGGER
    {
      "before": ["<leader>", "c", "F"],
      "commands": ["editor.action.formatDocument"]
    },
    // [o]rganize imports
    {
      "before": ["<leader>", "o"],
      "commands": ["editor.action.organizeImports"]
    },
    // END: code format
    // START: files
    // copy [f]ile [f]iles
    {
      "before": ["leader", "f", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    // copy [f]ile [r]ecent
    {
      "before": ["<leader>", "f", "r"],
      "commands": ["workbench.action.quickOpen"]
    },
    // copy [f]ile [p]ath
    {
      "before": ["<leader>", "f", "p"],
      "commands": ["copyRelativeFilePath"]
    },
    // copy [f]ile [p]ath but BIGGER
    {
      "before": ["<leader>", "f", "P"],
      "commands": ["copyFilePath"]
    },
    // END: files

    //
    // BUFFER/WORKBENCH CONFIGURATION
    //

    // "<leader>bo" close other buffer
    {
      "before": ["<leader>", "b", "o"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    // "<leader>bo" delete current buffer
    {
      "before": ["<leader>", "b", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    // "leader>," simulate buffers list in vim
    {
      "before": ["<leader>", ","],
      "commands": ["workbench.action.showAllEditorsByMostRecentlyUsed"]
    },
    // "<leader>wv" vertical split right
    {
      "before": ["<leader>", "w", "v"],
      "commands": ["workbench.action.splitEditorRight"]
    },
    // "<leader>w" normal split down
    {
      "before": ["<leader>", "w", "s"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    // "leader>wm" [m]aximize the active editor
    {
      "before": ["<leader>", "w", "m"],
      "commands": ["extension.multiCommand.maximizeAndFocusActiveEditorGroup"]
    },
    {
      "before": ["<leader>", "w", "r"],
      "commands": ["workbench.action.reloadWindow"]
    },

    // START: LSP support
    // gr (go to references)
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    // gd (go to definition) is already supported by default
    // gD (go to source definition)
    {
      "before": ["g", "D"],
      "commands": ["typescript.goToSourceDefinition"]
    },
    // gi (go to last insert) is already taken by default
    // gI (go to Implementation)
    {
      "before": ["g", "I"],
      "commands": ["editor.action.goToImplementation"]
    },
    // gA (go to [A]ll implementations)
    {
      "before": ["g", "A"],
      "commands": ["references-view.findImplementations"]
    },
    // gf (go to f) is similar to gd
    {
      "before": ["g", "f"],
      "after": ["g", "d"]
    },
    // gy (go to t[y]pe definition)
    {
      "before": ["g", "y"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    // gK (go to params hint)
    {
      "before": ["g", "K"],
      "commands": ["editor.action.triggerParameterHints"]
    },
    // gch (go to [c]all [h]ierachy)
    {
      "before": ["g", "c", "h"],
      "commands": ["editor.showCallHierarchy"]
    },
    // go to prev/next problem in files
    // go to previous [W]arning
    {
      "before": ["g", "W"],
      "commands": ["editor.action.marker.prevInFiles"]
    },
    // go to next [w]arning
    {
      "before": ["g", "w"],
      "commands": ["editor.action.marker.nextInFiles"]
    },
    // "<leader>ca" equivalent to refactor
    {
      "before": ["<leader>", "c", "a"],
      "commands": ["editor.action.refactor"]
    },
    // "<leader>cA" equivalent to refactor at source level
    {
      "before": ["<leader>", "c", "A"],
      "commands": ["editor.action.sourceAction"]
    },
    // go to [s]ymbol in file
    {
      "before": ["<leader>", "s", "s"],
      "commands": ["workbench.action.gotoSymbol"]
    },
    // go to [S]ymbol but bigger, to workspace
    {
      "before": ["<leader>", "s", "S"],
      "commands": ["workbench.action.showAllSymbols"]
    },
    // END: LSP support

    //
    // GIT/LAZYGIT CONFIGURATION
    //
    // [g]it [o] open change (cmd+g o)
    {
      "before": ["<leader>", "g", "o"],
      "commands": ["git.openChange"]
    },
    // [g]it [O] open all changes (cmd+g shift+o)
    {
      "before": ["<leader>", "g", "O"],
      "commands": ["git.viewChanges"]
    },

    // Tasks RUN Configuration
    // [r]un
    {
      "before": ["<leader>", "r", "r"],
      "commands": ["workbench.action.tasks.runTask"]
    },
    // rerun last
    {
      "before": ["<leader>", "r", "."],
      "commands": ["workbench.action.tasks.reRunTask"]
    },
    // [b]uild
    {
      "before": ["<leader>", "r", "b"],
      "commands": ["workbench.action.tasks.build"]
    },
    // [c]onfigure
    {
      "before": ["<leader>", "r", "c"],
      "commands": ["workbench.action.tasks.configureTaskRunner"]
    },
    // [g]et running tasks
    {
      "before": ["<leader>", "r", "g"],
      "commands": ["workbench.action.tasks.showTasks"]
    },
    // [x] terminate
    {
      "before": ["<leader>", "r", "x"],
      "commands": ["workbench.action.tasks.terminate"]
    },
    // [l]og
    {
      "before": ["<leader>", "r", "l"],
      "commands": ["workbench.action.tasks.showLog"]
    },
    // [t]est
    {
      "before": ["<leader>", "r", "t"],
      "commands": ["workbench.action.tasks.test"]
    },
    // [R]estart
    {
      "before": ["<leader>", "r", "R"],
      "commands": ["workbench.action.tasks.restartTask"]
    },

    //
    // VSCODE TESTING KEYMAPS
    //
    // use t as test
    // "<leader>t." Run last test
    {
      "before": ["<leader>", "t", "."],
      "commands": ["testing.reRunLastRun"]
    },
    // "<leader>tf" Run test in current [f]ile
    {
      "before": ["<leader>", "t", "f"],
      "commands": ["testing.runCurrentFile"],
      "when": "editorTextFocus"
    },
    // "<leader>tc" Run test at [c]ursor
    {
      "before": ["<leader>", "t", "c"],
      "commands": ["testing.debugAtCursor"],
      "when": "editorTextFocus"
    }
  ],
  // lazygit-vscode
  "lazygit-vscode.autoMaximizeWindow": true,
  "lazygit-vscode.panels": {
    "sidebar": "hide"
  },

  // GitLens Configuration
  "gitlens.currentLine.enabled": false,

  // GITHUB.COPILOT CONFIGURATION
  "github.copilot.chat.agent.thinkingTool": true,
  "github.copilot.selectedCompletionModel": "gpt-4o-copilot",

  // next edit suggestions
  // "github.copilot.nextEditSuggestions.enabled": true,
  // "github.copilot.nextEditSuggestions.fixes": true,
  "github.copilot.enable": {
    "*": false
  },

  // copilot chat configuration
  "github.copilot.chat.search.keywordSuggestions": true,
  "github.copilot.chat.commitMessageGeneration.instructions": [],
  "github.copilot.chat.testGeneration.instructions": [],
  "github.copilot.chat.codeGeneration.instructions": [],
  "chat.agent.enabled": true,
  "chat.mcp.discovery.enabled": true,
  // mcp servers
  "mcp": {}
}
