{
  // workbench
  // https://code.visualstudio.com/api/extension-capabilities/extending-workbench
  "workbench.colorTheme": "Visual Studio Light",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.preferredDarkColorTheme": "Visual Studio Dark",
  "workbench.preferredLightColorTheme": "Visual Studio Light",

  // window settings
  "window.openFoldersInNewWindow": "off",
  "window.autoDetectColorScheme": true,

  // Editor Settings
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": false,
  "editor.lineNumbers": "relative",
  "workbench.editor.showTabs": "none",
  "editor.rulers": [100],
  // Enable bracket pair colorization for better readability
  "editor.bracketPairColorization.enabled": true,
  // Show vertical lines for bracket pairs
  "editor.guides.bracketPairs": true,
  // Configure minimap for better performance and visibility
  "editor.minimap.renderCharacters": false,
  "editor.minimap.scale": 2,

  // search
  "search.searchEditor.focusResultsOnSearch": true,
  "search.searchEditor.reusePriorSearchConfiguration": true,
  // files
  "files.trimTrailingWhitespace": true,
  "files.autoSave": "afterDelay",
  // terminal
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.suggest.enabled": true,
  // Use either the following font for vscode terminal
  // "terminal.integrated.fontFamily": "FiraCode Nerd Font Mono",
  "terminal.integrated.fontFamily": "JetBrainsMono Nerd Font",
  // languages settings
  "[jsonc]": {},
  "[typescript]": {
    "editor.defaultFormatter": "vscode.typescript-language-features"
  },
  "[java]": {
    "editor.formatOnSave": false
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[jsonnet]": {
    "editor.defaultFormatter": "Grafana.vscode-jsonnet"
  },
  "jsonnet.languageServer.formatting": {
    "StringStyle": "double"
  },
  // plugins
  // Git Configuration
  "git.openRepositoryInParentFolders": "always",
  "git.autofetch": true,
  "git.verboseCommit": true,
  "git.enableSmartCommit": true,

  // Vim Configuration
  // vim.core
  "vim.useSystemClipboard": true,
  "vim.leader": "<space>",
  // Enable and configure yank highlighting
  "vim.highlightedyank.enable": true,
  "vim.highlightedyank.duration": 200,
  // allowing more breathing room when using vim keybindings
  "vim.timeout": 2000,
  // vim.easymotion
  "vim.easymotion": true,
  "vim.easymotionKeys": "hklyuiopnm,qwertzxcvbasdgjf",
  "vim.insertModeKeyBindings": [],
  "vim.visualModeKeyBindingsNonRecursive": [
    // START: Core settings
    // prevent copying the selected text after pasting
    {
      "before": ["p"],
      // p: Paste the text.
      // gv: Reselect the text that was just pasted.
      // y: Yank the reselected text back
      "after": ["p", "g", "v", "y"]
    },
    // END: Core settings
    // START: easymotion
    {
      "before": ["s"], // read: use s to jump to anywhere with easymotion
      "after": ["<leader>", "<leader>", "s"]
    },
    // END: easymotion
    // START: code format
    {
      "before": ["<leader>", "c", "f"],
      "commands": ["editor.action.formatSelection"]
    },
    // END: code format
    // START: LSP support
    // rename symbol
    {
      "before": ["<leader>", "r"],
      "commands": ["editor.action.rename"]
    },
    // refactor is actually [c]ode [a]ction
    {
      "before": ["<leader>", "a"],
      "commands": ["editor.action.refactor"]
    },
    // code source [A]ction like clean up source file
    {
      "before": ["<leader>", "A"],
      "commands": ["editor.action.sourceAction"]
    }
    // END: LSP support
    // START: git
    // END: git
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    // START: Core settings
    // use vscode undo/redo
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<C-r>"],
      "commands": ["redo"]
    },
    {
      "before": ["Y"], // usage: Y to yank from start to end
      "after": ["y", "$"]
    },
    {
      "before": ["<C-c>"],
      "after": ["c", "i", "w"]
    },
    {
      "before": ["j"], // smooth j over wrapped text
      "after": ["g", "j"]
    },
    {
      "before": ["k"], // smooth k over wrapped text
      "after": ["g", "k"]
    },
    {
      "before": ["Up"],
      "after": ["<C-w>", "k"]
    },
    {
      "before": ["Down"],
      "after": ["<C-w>", "j"]
    },
    {
      "before": ["Left"],
      "after": ["<C-w>", "h"]
    },
    {
      "before": ["Right"],
      "after": ["<C-w>", "l"]
    },
    // Vim UI Configuration
    {
      "before": ["<leader>", "u", "w"],
      "commands": ["editor.action.toggleWordWrap"]
    },
    // search keybindings
    {
      "before": ["<leader>", "s", "k"],
      "commands": ["workbench.action.openGlobalKeybindings"]
    },
    // END: Core settings
    // START: easymotion
    {
      "before": ["s"], // read: use s to jump to anywhere with easymotion
      "after": ["<leader>", "<leader>", "s"]
    },
    // END: easymotion
    // START: code format
    // format the changes only
    {
      "before": ["<leader>", "c", "f"],
      "commands": ["editor.action.formatChanges"]
    },
    // [f]ormat but BIGGER
    {
      "before": ["<leader>", "c", "F"],
      "commands": ["editor.action.formatDocument"]
    },
    // [o]rganize imports
    {
      "before": ["<leader>", "o"],
      "commands": ["editor.action.organizeImports"]
    },
    // END: code format
    {
      "before": ["leader", "e"],
      "commands": ["workbench.view.explorer"]
    },
    // START: files
    // copy [f]ile [f]iles
    {
      "before": ["leader", "f", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    // copy [f]ile [r]ecent
    {
      "before": ["<leader>", "f", "r"],
      "commands": ["workbench.action.quickOpen"]
    },
    // copy [f]ile [p]ath
    {
      "before": ["<leader>", "f", "p"],
      "commands": ["copyRelativeFilePath"]
    },
    // copy [f]ile [p]ath but BIGGER
    {
      "before": ["<leader>", "f", "P"],
      "commands": ["copyFilePath"]
    },
    // END: files
    // START: buffers
    {
      "before": ["<leader>", "b", "o"],
      "commands": ["workbench.action.closeOtherEditors"]
    },
    {
      "before": ["<leader>", "b", "d"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      "before": ["<leader>", "w", "v"],
      "commands": ["workbench.action.splitEditorRight"]
    },
    {
      "before": ["<leader>", "w", "s"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    // simulate buffers list in vim
    {
      "before": ["<leader>", ","],
      "commands": ["workbench.files.action.focusOpenEditorsView"]
    },
    // END: buffers
    // START: LSP support
    // gr (go to references)
    {
      "before": ["g", "r"],
      "commands": ["editor.action.goToReferences"]
    },
    // gd (go to definition) is already supported by default
    // gD (go to source definition)
    {
      "before": ["g", "D"],
      "commands": ["typescript.goToSourceDefinition"]
    },
    // gi (go to last insert) is already taken by default
    // gI (go to Implementation)
    {
      "before": ["g", "I"],
      "commands": ["editor.action.goToImplementation"]
    },
    // gf (go to f) is similar to gd
    {
      "before": ["g", "f"],
      "after": ["g", "d"]
    },
    // gy (go to t[y]pe definition)
    {
      "before": ["g", "y"],
      "commands": ["editor.action.goToTypeDefinition"]
    },
    // gK (go to params hint)
    {
      "before": ["g", "K"],
      "commands": ["editor.action.triggerParameterHints"]
    },
    // gch (go to [c]all [h]ierachy)
    {
      "before": ["g", "c", "h"],
      "commands": ["editor.showCallHierarchy"]
    },
    // go to prev/next problem in files
    {
      "before": ["[", "e"],
      "commands": ["editor.action.marker.prevInFiles"]
    },
    {
      "before": ["]", "e"],
      "commands": ["editor.action.marker.nextInFiles"]
    },
    // rename symbol
    {
      "before": ["<leader>", "r"],
      "commands": ["editor.action.rename"]
    },
    // refactor is actually [c]ode [a]ction
    {
      "before": ["<leader>", "a"],
      "commands": ["editor.action.refactor"]
    },
    // code source [A]ction like clean up source file
    {
      "before": ["<leader>", "A"],
      "commands": ["editor.action.sourceAction"]
    },
    // go to [s]ymbol in file
    {
      "before": ["<leader>", "s", "s"],
      "commands": ["workbench.action.gotoSymbol"]
    },
    // go to [S]ymbol but bigger, to workspace
    {
      "before": ["<leader>", "s", "S"],
      "commands": ["workbench.action.showAllSymbols"]
    },
    // END: LSP support
    // START: git/lazygit
    {
      "before": ["<leader>", "g", "g"],
      "commands": ["lazygit-vscode.toggle"]
    },
    {
      "before": ["]", "h"],
      "commands": ["workbench.action.editor.nextChange"]
    },
    {
      "before": ["[", "h"],
      "commands": ["workbench.action.editor.previousChange"]
    },
    // END: git/lazygit

    // Tasks Configuration
    // [t]ask [r]un
    {
      "before": ["<leader>", "t", "r"],
      "commands": ["workbench.action.tasks.runTask"]
    },
    // [t]ask rerun last
    {
      "before": ["<leader>", "t", "."],
      "commands": ["workbench.action.tasks.reRunTask"]
    },
    // [t]ask [b]uild
    {
      "before": ["<leader>", "t", "b"],
      "commands": ["workbench.action.tasks.build"]
    },
    // [t]ask [c]onfigure
    {
      "before": ["<leader>", "t", "c"],
      "commands": ["workbench.action.tasks.configureTaskRunner"]
    },
    // [t]ask [g]et running tasks
    {
      "before": ["<leader>", "t", "g"],
      "commands": ["workbench.action.tasks.showTasks"]
    },
    // [t]ask [x] terminate
    {
      "before": ["<leader>", "t", "x"],
      "commands": ["workbench.action.tasks.terminate"]
    },
    // [t]ask [l]og
    {
      "before": ["<leader>", "t", "l"],
      "commands": ["workbench.action.tasks.showLog"]
    },
    // [t]ask [t]est
    {
      "before": ["<leader>", "t", "t"],
      "commands": ["workbench.action.tasks.test"]
    },
    // [t]ask [R]estart
    {
      "before": ["<leader>", "t", "R"],
      "commands": ["workbench.action.tasks.restartTask"]
    },
  ],
  // lazygit-vscode
  "lazygit-vscode.autoMaximizeWindow": true,
  "lazygit-vscode.panels": {
    "sidebar": "hide"
  },
  // github.copilot
  "github.copilot.chat.agent.thinkingTool": true,
  "github.copilot.selectedCompletionModel": "gpt-4o-copilot",
  "github.copilot.chat.commitMessageGeneration.instructions": [],
  "github.copilot.chat.testGeneration.instructions": [
    {
      "text": "Use JUnit 5 and Mockito for Java testing. Include @DisplayName annotations for better readability."
    },
    {
      "text": "Mock data should only be used in tests, never in dev or prod environments."
    },
    {
      "text": "Write simple, focused tests that cover all major functionality and edge cases. Tests should be easy to understand and maintain."
    },
    {
      "text": "Follow DRY principles by reusing common setup and utility methods. Refactor test files if they become too large or complex."
    },
    {
      "text": "Ensure test coverage across all applicable environments (dev, test, prod) while staying focused on the relevant code areas."
    },
    {
      "text": "Maintain existing testing patterns and frameworks unless there's a compelling reason for change. Consider the impact of code changes on existing tests."
    },
    {
      "text": "Keep test files organized and avoid testing unrelated code or introducing unnecessary complexity."
    }
  ],
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "text": "Comment First: Write comments at the beginning of the development process. For a new class, start by writing the class interface comment.  Next, write interface comments and signatures for the most important public methods, leaving the method bodies empty.  Iterate over these comments until the basic structure is correct.  Write declarations and comments for the most important class instance variables.  Fill in the bodies of the methods, adding implementation comments as needed.  For each new method, write the interface comment before the method body.  For instance variables, write the comment when declaring the variable. Let me know If you're struggling to explain a method or variable with a short, clear comment so that we can improve the design together."
    },
    {
      "text": "Write simple, clean, and organized solutions. Avoid complexity and keep files under 300 lines of code."
    },
    {
      "text": "Avoid code duplication by leveraging existing functionality in the codebase. When fixing bugs, exhaust existing implementation options before introducing new patterns."
    },
    {
      "text": "Make focused changes that are directly related to the task. Do not modify unrelated code or existing architectural patterns unless specifically instructed."
    },
    {
      "text": "Consider all environments (dev, test, prod) when writing code. Never add stubbing or fake data patterns to production code."
    },
    {
      "text": "Write thorough tests for all major functionality and consider the impact of changes on existing tests and related code areas."
    },
    {
      "text": "Protect sensitive configurations: never overwrite .env files without explicit confirmation."
    },
    // for tests
    {
      "text": "Use JUnit 5 and Mockito for Java testing. Include @DisplayName annotations for better readability."
    },
    {
      "text": "Mock data should only be used in tests, never in dev or prod environments."
    },
    {
      "text": "Write simple, focused tests that cover all major functionality and edge cases. Tests should be easy to understand and maintain."
    },
    {
      "text": "Follow DRY principles by reusing common setup and utility methods. Refactor test files if they become too large or complex."
    },
    {
      "text": "Ensure test coverage across all applicable environments (dev, test, prod) while staying focused on the relevant code areas."
    },
    {
      "text": "Maintain existing testing patterns and frameworks unless there's a compelling reason for change. Consider the impact of code changes on existing tests."
    },
    {
      "text": "Keep test files organized and avoid testing unrelated code or introducing unnecessary complexity."
    }
  ],
  "chat.agent.enabled": true,
  "chat.mcp.discovery.enabled": true,
  // mcp servers
  "mcp": {}
}
